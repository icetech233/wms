package main

import "time"

type StructA struct {
	DateTime string
	Age      int
}

type StructB struct {
	// ab    time.Duration
	DateTime time.Time
	Age      int
}



package main

import (
	"fmt"
	"time"
	"wms/util"
)

func testCopy() {

	_age := 666
	src := StructB{DateTime: time.Now(), Age: _age}
	dst := StructA{}
	// go copy(dst Writer, src Reader)
	for i := 0; i < 10; i++ {
		_age = _age + 1
		src.Age = _age
		src.DateTime = time.Now()
		t1 := time.Now()
		er2 := util.CopyStruct(&dst, &src)
		if er2 != nil {
			panic(er2)
		}
		fmt.Println("复制耗时:", time.Since(t1))
		fmt.Println("结果", src, dst)
	}
}


func main2() {

	t1 := time.Now()
	tof := reflect.TypeOf(t1)
	vof := reflect.ValueOf(t1)
	tof = vof.Type()
	fmt.Println(tof.Name(), tof.Kind())
	tof.Elem()

	t2, _ := vof.Interface().(time.Time)
	fmt.Println(t2)
	return

	spus, resultDb := gplus.SelectList[Spu](nil)
	spew.Dump(resultDb.Error, resultDb.RowsAffected)
	for _, spu := range spus {
		b, _ := json.Marshal(spu)
		fmt.Println("spu:", string(b))
	}
}

// func readConsul22() []byte {

// 	consul_config := &api.Config{
// 		Address: "127.0.0.1:8500",
// 		Scheme:  "http",
// 	}
// 	// Get a new client
// 	client, err := api.NewClient(consul_config)
// 	if err != nil {
// 		panic(err)
// 	}
// 	// Get a handle to the KV API
// 	kv := client.KV()
// 	// (*api.KVPair, *api.QueryMeta, error)
// 	pair, q, err := kv.Get("wms", nil)
// 	if err != nil {
// 		panic(err)
// 	}
// 	fmt.Println("请求时间:", q.RequestTime)
// 	//fmt.Printf("KV: %v \n**\n%s\n", pair.Key, pair.Value)
// 	return pair.Value
// }